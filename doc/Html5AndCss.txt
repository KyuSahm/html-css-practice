1. 실습 환경 준비
1) Visual Studio Code설치
2) Visual Studio Code의 좌측에 위치한 "확장(Extension)" 메뉴에서 Live Studio 설치

2. 경로
1) 경로 표시법
/     // 루트 디렉토리
./    // 현재 디렉토리
../    // 상위 디렉토리
../../  // 2번 상위 디렉토리

2) 경로 지정방법: 절대경로 or 상대경로
- 루트 디렉토리를 이용한 절대경로
- 각 HTML별로 상대경로 지정 : 유리. 폴더 구조를 바꿀 때 수정할 사항이 적어진다.

3. html 파일 생성
1) VS Code에서 "!"를 입력하고 엔터치면, 기본적인 html template를 입력해 준다.

4. html tags
1) tags 분류
- 블록 스타일 Tags: 블록 태그의 크기는 자신이 감싸는 콘텐츠와 상관없이 자신의 영역을 가지고 있음. 기본적으로 window의 width를 다 채우는 형태로 작동하고, 줄바꿈이 일어난다.
  섹션: <section><nav><aside><article>
  블록: <div><header><main><footer>
  제목: <h/><hgroup/>..  // 위 아래 Margin이 조금 존재. 
  목록: <ul/><ol/><dl/>.. // 왼쪽에 어느 정도의 Margin이 존재.
  문장: <p/>
  표: <table/>
  입력폼: <form/>

- 인라인 Tags:  줄바꿈이 없음. 자신이 감싸는 콘텐츠의 크기가 자신의 크기가 됨.
  하이퍼 텍스트: <a/>
  글자체 Bold: <b/>
  밑줄: <u/>
  폰트: <font/> => css로 대체 가능
  스타일 지정: <span> => css로 대체 가능
  굵은 텍스트: <strong> => css로 대체 가능
  한줄바꿈: <br>            // 사용자가 Enter키를 친것은 한줄에서 나옴.
  현재 사용가능한 인라인 Tags: css로 대체가능한 꾸미는 Tag들은 사라지고 있다.
    <a>, <abbr>, <acronym>, <audio>, <br>, <bdi>, <bdo>, <big>, <br>, <button>, <canvas>, <cite>, <code>, <data>, <datalist>, <del>,
    <dfn>, <em>, <embed>, <i>, <iframe>, <img>, <input>, <ins>, <kbd>, <label>, <nao>, <mark>, <meter>, <noscript>, <object>, <output>,
    <picture>, <progress>, <q>, <ruby>, <s>, <samp>, <script>, <select>, <slot>, <small>, <span>, <strong>, <sub>, <sup>, <svg>, <template>,
    <textarea>, <time>, <u>, <tt>, <var>, <video>, <wbr>

- 영역 나누기: <div> => 위의 것들에 해당되지 않는 경우처럼 애매할 때. 기본적으로 window의 width를 다 채우는 형태로 작동하므로, 줄바꿈이 일어난다.

2) 제목 태그 - 제목을 글자크기에 따라서 아래와 같이 나뉨.
<h1>, <h2>, <h3>, <h4>, <h5>, <h6>

3) 목록 태그
 - <ul></ul>: unordered list.
 - <li></li>: 목록의 item, list item의 약자
 - <ol></ol>: ordered list. 숫자가 라벨링됨.
 - <dl></dl>: 설명과 관련된 list
 - <dt></dt>: 용어의 정의
 - <dd></dd>: 용어의 설명

예) 
<ul>
  <li>학습가이드</li>
  <li>강좌선택</li>
  <li>AnswerIs</li>
</ul>

<ol>
  <li>학습가이드</li>
  <li>강좌선택</li>
  <li>AnswerIs</li>
</ol>

<dl>
  <dt>어묵탕</dt>
  <dd>따뜻한 국물..</dd>
  <dt>떡복이</dt>
  <dd>맵고 쫄깃..</dd>        
</dl>

4) form에서 주로 사용하는 태그
- <fieldset>: 묶음 표시     
- <legend>: 묶음의 표시글
- <label>: 라벨
- <input type="text"/>: input text
- <input type="submit"/>: 제출 버튼
예)<form>
        <fieldset>
          <legend>검색입력필드</legend>  
          <label>과정검색</label>
          <input type="text"/>
          <input type="submit" value="검색">
        </fieldset>
    </form>
4) Table 그리기
- <table>: 테이블
- <table border="1">: 테이블 경계선 굵기
- <tr>: 테이블의 ROW
- <td>: 테이블의 Column

6) HTML5(+Semantic Web) TAGs
: 섹션 Tag의 종류들 -> <section>, <aside>, <nav> 
- <header>: 웹 문서 맨 윗부분에 있으며 웹 사이트 이름, 글로벌 링크(로그인, 회원가입, 사이트맵, 언어 선택등 웹사이트 어느 곳에서든지 이용할 수 있는 링크)등으로 구성된 영역이다.
                사이트 이름(로고), 내비게이션, 헤드라인, 검색 등으로 구성된다. 과거에는 <div id="header">와 같이 사용했었다.
                문서나 각 section, article 의 헤더 부분에 사용가능하며, 그것들의 제목이나 간단한 소개 콘텐츠를 담을 수 있다.
                브라우저가 헤더영역을 인식할 수 있게되면 스크린리더의 내비게이션과 검색엔진의 색인에 도움을 줄 수 있다.
예)
<header>
    <h1>LOGO</h1>
    <h2>검색</h2>
    <input type="text">
</header>
- <main>: HTML5 권고후보에 main요소가 추가되었다. 문서내 main요소가 나오는 것은 1번만 허용
	 콘텐츠모델은 Flow content. 단, main요소를 article, aside, footer, header, nav요소의 하위로 사용하지 않음
	섹션 콘텐츠가 아니기 때문에 아웃라인 생성하지 않음

- <aside>: 섹션 Tag 중의 하나. 페이지 전체 내용과는 어느정도 관련성이 있지만 주요 내용과는 직접적인 연관성은 없는 분리된 내용을 담고 있다.
	  흔히 사이드바라고 부르는 영역으로 배너, 용어 설명, 관련 상품 등 본문 내용과 직접적인 관련성이 적거나 없는 내용으로 구성된다.
	  aside 요소로 구성된 것을 검색엔진은 무시하고 본문 위주로 색인을 진행할 수 있고, 스크린리더 사용자는 해당 영역이 어떤 성격의 영역인지 신속하게 파악할 수 있으므로, 곧바로 다른 영역으로 이동할 수도 있다.

- <footer>: 웹 문서 맨 아래쪽에 있으며 저작권, 연락처등으로 구성된 영역이다.
	   푸터는 바닥 영역 또는 꼬리말을 지칭하는데, 저작권, 연락정보 등 본문과의 관련성은 있지만 본문에는 담기 어려운 내용을 담는다.
	   일반적으로 푸터 영역은 한 문서 내에서 한 번만 제공되지만 section 요소나 article 요소 내에 있는 footer 요소는 해당 영역에 관한 꼬리말을 표시할 수 있다.
	   맨위로 가기 링크나 헤더의 메인 내비게이션도 반복 제공을 위해 푸터 영역에 둘 수 있다.

- <nav>: 섹션 Tag 중의 하나. 섹션이지만 링크를 모아둠. 목적지로 이동할 수 있도록 링크를 별도로 모아둔 영역.
	링크 중에서 중요도가 높은 링크를 체계적으로 구성해 놓은 것으로 단순 본문 링크와 메뉴(카테고리) 성격의 링크인지 확인이 가능하다.
	ul, li, a 요소들을 여전히 함께 사용해야 한다.
	브라우저가 네비게이션 영역을 알 수 있게 되면 스크린리더의 내비게이션과 검색엔진의 색인에도 도움을 줄 수 있다.                
예)
<nav>
    <h1>메인 내비게이션</h1>
    <ul>
        <li>메뉴1</li>
        <li>메뉴2</li>
    </ul>
</nav>

- <section>: 섹션 Tag 중의 하나. 섹션을 표시한다. 내용적 흐름과 구조를 만들기 위해 내용을 나누는 용도이다.
  	    같은 성격의 내용, 즉 관련있는 내용을 section 요소로 묶어 표시한다.
	    뉴스와 광고 섹션 처럼 서로 다른 성격을 지닌 것들을 section 요소로 표시하면 영역 구분이 아주 명확해진다.
	    탭과 같은 상위 주제 아래에 하위 주제로 엮인 탭 방식의 구성일때 각각의 탭을 section 요소로 표시할 수 있다.
	    섹션은 독립적인 영역이라 섹션 내에도 헤더(header)와 푸터(footer)를 둘 수 있다. 이것은 섹션마다 나름의 제목 체계를 가질 수 있다는 것을 의미하며, 섹션마다 H1 요소를 가질 수 있게 되었다.
	    스크린리더 사용자는 섹션 단위로 이동할 수 있으므로 문서 내 내비게이션이 좀 더 수월해지고 검색엔진은 특정 섹션 중심으로 색인 활동을 할 수 있으므로 검색엔진의 효율성을 높일 수 있다.
예)
<section>
    <article>
        <h1>제목</h1>
        <p>본문</p>
    </article>
</section>

- <article>: 독립적으로 구성된 글을 표시한다. 본문과 별개로 구성되어 다른 영역에 영향을 주거나 받지 않고 독립적으로 배포되거나 재사용할 수 있다.
   	   게시판의 게시물, 블로그 포스트, 댓글, 위젯에 담긴 콘텐츠등이 article에 해당한다.
	   일반적인 상황에서는 section 요소가 article 요소를 포함한다. 하지만 독립적으로 구성된 내용이 몇 개의 섹션으로 구성된 경우라면 article 요소가 section 요소를 포함할 수도 있다.
	   section 요소가 관련 있는 내용을 묶는 역할이라면 article 요소는 관련 있는 내용 중에서 독립적으로 구성된 글을 별도로 묶는 역할이다.
	   article 영역 내에 헤더(header)와 푸터(footer)를 둘 수 있다. article 요소안에 article 요소가 들어갈 경우, 밖의 요소의 내용과 안쪽의 요소의 내용이 관련이 있는 내용이라는 것을 의미한다.
예)
<article>
    <header>
        <h1>HTML5 구조</h1>
        <p>Published On <time datetime="2013-01-22">2013년1월22일</time></p>
     </header>
     <p>본문 내용</p>
     <footer>Posted in unclepapa</footer>
     <article> <!-- 코멘트 시작 -->
         <header> 작성자:<a href="">나그네</a> at <time datetime="2013-01-22T08:45">2013년1월22일 08:45</time></header>
         <p>코멘트 내용</p>
     </article> <!-- 코멘트 끝 -->
</article>

5. Web Developer
- Chrome 브라우저에 설치하는 웹앱
- "Google web store"검색 => chrome 웹 스토어

6. CSS란?
1) 스타일을 변경하기 위한 명령어 집합: "css_properties-1.png, css_properties-2.png" 파일 참조
2) 스타일을 적용하지 않아도 기본문서의 Tag가 가지고 있는 스타일이 존재
3) 개별 적용예 => "속성:값;" 형태로 적용. 예를들면, "color:blue;". 하나의 속성이라도 ";"로 끝내야 됨.
 <h1 style="color:blue;font-size:5px;">메인메뉴</h1> => 제목의 색깔과 폰트 사이즈 지정
4) https://developer.mozilla.org/en-US/docs/Web/CSS/Reference => 정확한 CSS properties 설명

7. 기본 선택자(Selector)
1) 태그명, 아이디, 클래스명(그룹명)으로 적용가능
2) 태그명으로 적용
<h1 style="font-weight:bold; cold:blue;">제목1</h1>
<h1 style="font-weight:bold; cold:blue;">제목1</h1>
<h1 style="font-weight:bold; cold:blue;">제목1</h1>
=> 반복적인 내용을 한번에 적용(HTML 문서내에 존재하는 h1 tag들에 모두 적용)
<style>
    h1
    {
        font-weight:bold; cold:blue;
    }
</style>
3) 클래스명(그룹명)으로 적용 => 그룹명 앞에 태그명과 구분하기 위해 "."을 찍음.
<style>
   .g1 {
         color:red;
         font-weight:bold;
        }
   ....
   <li><a href="" class="g1">학습가이드</a></li>
</style>
4) 아이디로 적용 => 한 HTML의 Element에는 ID가 중복되면 안됨. 그룹명 앞에 태그명과 구분하기 위해 "#"을 찍음. 
                            아이디가 두단어 이상인 경우, "-"로 구분. id="main-menu"
                            Element의 자식들이 존재하는 경우, 다같이 적용됨.
<style>
    #name1 {
        color:blue;
        font-weight:bold;
    }
</style>
....
<li><a href="" id="name1">강좌선택</a></li>
<li><a href="" id="name2">AnswerIs</a></li><!-- id가 중복되면 안됨-->

8. 콤비네이션 연산자(Combinators)
1) 종류
- Descendant selectors: A B  => A selector 자손들 중에서 B selector를 찾아라!
- Child selector: A > B => A selector 자식들 중에서 B selector를 찾아라!
- Adjacent sibling selector: A + B => A selector 오른쪽 수평방향으로 바로 이웃한 것(바로 아래 동생) 중에서 B selector를 찾아라!
- General sibling selector: A ~ B => A selector 오른쪽 수평방향으로 이웃한 것들(동생들) 중에서 B selector를 찾아라!
예)
<style>
    #main-menu h1{
      font-size:30px;
    }
</style>  
=> "main-menu" id를 가지는 엘리먼트의 자손들 중, h1 tag에 적용 
<style>
    #main-menu>h1{
      font-size:30px;
    }
</style>  
=> "main-menu" id를 가지는 엘리먼트의 자식 엘리먼트들 중, h1 tag에 적용
<style>
    #main-menu>h1+ul{
      font-size:20px;
    }
</style>
=> "main-menu" id를 가지는 엘리먼트의 자식 엘리먼트들 중, h1 tag에 적용 그리고, h1과 Adjacent sibling selector관계에 있는 ul tag에 적용
<style>
    #main-menu>h1{
      font-size:20px;
    }
    #main-menu>ul{
      font-size:20px;
    }
</style>
=> "main-menu" id를 가지는 엘리먼트의 자식 엘리먼트들 중, h1과 ul tag에 적용. "#main-menu>h1+ul"형식보다 좀 더 자연스러움.
<style>
    #main-menu .first{            // "#main-menu *.first"를 의미함. 
      font-size:100px;
    }  
</style>
<h1 class="first">서두</h1>  // 적용 안됨
<nav id="main-menu">
    <h1>메인메뉴</h1>
    <ul>
        <li class="first"><a href="">학습가이드</a></li> // main-menu의 자식 엘리먼트이므로 적용됨.
        <li><a href="">강좌선택</a></li>
        <li><a href="">AnswerIs</a></li>
        <li><nav><h1>aaaa</h1></nav></li>
    </ul>
</nav>
=> "main-menu" id를 가지는 엘리먼트의 자손 엘리먼트들 중, "first"란 이름의 class를 가진 엘리먼트에 적용. 
<style>
    #main-menu li.first{
        font-size:50px;
    }
</style>
<nav id="main-menu">
    <h1>메인메뉴</h1>
    <ul>
        <li class="first"><a href="">학습가이드</a></li>
        <li><a href="" class="first">강좌선택</a></li>
        <li><a href="">AnswerIs</a></li>
        <li><nav><h1>aaaa</h1></nav></li>
    </ul>
</nav>
=> "main-menu" id를 가지는 엘리먼트의 <li> 자손 엘리먼트들 중, "first"란 이름의 class를 가진 엘리먼트에만 적용. 
<style>
    #main-menu>ul>li.first{
        font-size:40px;
        font-weight:bold;
    }
</style>
<nav id="main-menu">
    <h1>메인메뉴</h1>
    <ul>
        <li class="first">
            <a href="">학습가이드</a>
            <ul>
                <li class="first">서브메뉴 1</li>
                <li>서브메뉴 2</li>
            </ul>
        </li>
        <li><a href="" class="first">강좌선택</a></li>
        <li><a href="">AnswerIs</a></li>
        <li><nav><h1>aaaa</h1></nav></li>
    </ul>
</nav>
=> "main-menu" id를 가지는 엘리먼트의 <ul> 자식엘리먼트의 <li> 자식엘리먼트 중에 "first"란 이름의 class를 가진 엘리먼트에만 적용. 
=> 해당 엘리먼트의 하위엘리먼트들도 자동으로 동일한 스타일이 적용됨. 따라서, "학습가이드", "서브메뉴 1", "서브메뉴 2"에도 적용.
<style>
    #main-menu>ul>li.first+.aa{
        font-size:100px;
        color:red;
    }
</style>
<nav id="main-menu">
    <h1>메인메뉴</h1>
    <ul>
        <li class="first">
            <a href="">학습가이드</a>
            <ul>
                <li class="first">서브메뉴 1</li>
                <li>서브메뉴 2</li>
            </ul>
        </li>
        <li class="aa"><a href="">강좌선택</a></li>
        <li class="aa"><a href="">AnswerIs</a></li>
        <li><nav><h1>aaaa</h1></nav></li>
    </ul>
</nav>
=> "main-menu" id를 가지는 엘리먼트의 <ul> 자식엘리먼트의 <li> 자식엘리먼트 중에 "first"란 이름의 class를 가진 엘리먼트에 바로 동생인 "aa"란 이름의 class를 가진 엘리먼트에만 적용. 
=> 결국, "강좌선택"에는 적용되고, "AnswerIs"에는 적용 안됨.
<style>
    #main-menu>ul>li.first~.bb{
        font-size:50px;
        color:blue;
    }
</style>
<nav id="main-menu">
    <h1>메인메뉴</h1>
    <ul>
        <li class="first">
            <a href="">학습가이드</a>
            <ul>
                <li class="first">서브메뉴 1</li>
                <li>서브메뉴 2</li>
            </ul>
        </li>
        <li class="aa"><a href="">강좌선택</a></li>
        <li class="aa"><a href="">AnswerIs</a></li>
        <li class="bb"><nav><h1>aaaa</h1></nav></li>
    </ul>
</nav>
=> "main-menu" id를 가지는 엘리먼트의 <ul> 자식엘리먼트의 <li> 자식엘리먼트 중에 "first"란 이름의 class를 가진 엘리먼트들에 동생들 중 "bb"란 이름의 class를 가진 엘리먼트에 적용. 
=> 결국, "aaaa"에 적용

2) CSS Style 적용 순서
- 콘텐츠 블록 스타일을 먼저 작업 후, 레이아웃 블록 스타일을 작업("css_style_apply_order.png" 참조)

9. Selectors 정리
1) Basic Selectors
- Type Selector: 엘리먼트명
- Class Selector: .클래스명
- ID Selector: #ID명
- Universal Selector: *
- Attribute Selector: [속성=값]

2) Combinators
- Descendant Selector: A B
- Child Selector: A > B
- Adjacent Sibling Selector: A + B
- General Sibling Selector: A ~ B

10. Attribute Selector(속성 선택자)
1) 관련 사이트 - https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors
2) 문법 설명
[attr]
Represents elements with an attribute name of attr.
[attr=value]
Represents elements with an attribute name of attr whose value is exactly value.
[attr~=value]
Represents elements with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly value.
[attr|=value]
Represents elements with an attribute name of attr whose value can be exactly value or can begin with value immediately followed by a hyphen, - (U+002D).
It is often used for language subcode matches.
[attr^=value]
Represents elements with an attribute name of attr whose value is prefixed (preceded) by value.
[attr$=value]
Represents elements with an attribute name of attr whose value is suffixed (followed) by value.
[attr*=value]
Represents elements with an attribute name of attr whose value contains at least one occurrence of value within the string.
[attr operator value i]
Adding an i (or I) before the closing bracket causes the value to be compared case-insensitively (for characters within the ASCII range).
[attr operator value s] 
Adding an s (or S) before the closing bracket causes the value to be compared case-sensitively (for characters within the ASCII range).
<style>
    /* All divs with a `lang` attribute are bold. */
    div[lang] {
        font-weight: bold;
    }

    /* All divs without a `lang` attribute are italicized. */
    div:not([lang]) {
        font-style: italic;
    }

    /* All divs in US English are blue. */
    div[lang~="en-us"] {
        color: blue;
    }

    /* All divs in Portuguese are green. */
    div[lang="pt"] {
        color: green;
    }

    /* All divs in Chinese are red, whether simplified (zh-CN) or traditional (zh-TW). */
    div[lang|="zh"] {
        color: red;
    }

    /* All divs with a Traditional Chinese `data-lang` are purple. */
    /* Note: You could also use hyphenated attributes without double quotes */
    div[data-lang="zh-TW"] {
        color: purple;
    }
</style>
<html>
    <div lang="en-us en-gb en-au en-nz">Hello World!</div>
    <div lang="pt">Olá Mundo!</div>
    <div lang="zh-CN">世界您好！</div>
    <div lang="zh-TW">世界您好！</div>
    <div data-lang="zh-TW">世界您好！</div>
</html>

<style>
    a {
        color: blue;
    }

    /* Internal links, beginning with "#" */
    a[href^="#"] {
        background-color: gold;
    }

    /* Links with "example" anywhere in the URL */
    a[href*="example"] {
        background-color: silver;
    }

    /* Links with "insensitive" anywhere in the URL, regardless of capitalization */
    a[href*="insensitive" i] {
        color: cyan;
    }

    /* Links with "cAsE" anywhere in the URL, with matching capitalization */
    a[href*="cAsE" s] {
        color: pink;
    }

    /* Links that end in ".org" */
    a[href$=".org"] {
        color: red;
    }

    /* Links that start with "https" and end in ".org" */
    a[href^="https"][href$=".org"] {
        color: green;
    }
</style>
<html>
    <ul>
        <li><a href="#internal">Internal link</a></li>
        <li><a href="http://example.com">Example link</a></li>
        <li><a href="#InSensitive">Insensitive internal link</a></li>
        <li><a href="http://example.org">Example org link</a></li>
        <li><a href="https://example.org">Example https org link</a></li>
    </ul>
</html>

3) 사용예
<style>
    #member-menu a[href]{
        font-size:30px;
        color:green;
    }
</style>
<nav id="member-menu">
    <h1>회원메뉴</h1>
    <ul>
        <li><a href="../index.html">HOME</a></li>
        <li><a href="../member/login.html">로그인</a></li>
        <li><a href="../member/signup-agree.html">회원가입</a></li>
        <li>회원탈퇴</li>
    </ul>
</nav>
=> "member-menu" id를 가지는 엘리먼트의 <a> Tag를 사용하는 자손엘리먼트 중, href 속성(attribute)를 가진 엘리먼트들에게만 적용
=> "HOME", "로그인", "회원가입"에는 적용되나, "회원탈퇴"에는 적용안됨.
<style>
    #member-menu a[href="../index.html"]{
        font-size:30px;
        color:red;
    }
</style>
<nav id="member-menu">
    <h1>회원메뉴</h1>
    <ul>
        <li><a href="../index.html">HOME</a></li>
        <li><a href="../member/login.html">로그인</a></li>
        <li><a href="../member/signup-agree.html">회원가입</a></li>
        <li>회원탈퇴</li>
    </ul>
</nav>
=> "member-menu" id를 가지는 엘리먼트의 <a> Tag를 사용하는 자손엘리먼트 중, href 속성(attribute)의 값이 "../index.html"인 엘리먼트들에게만 적용
=> "HOME"에만 적용
